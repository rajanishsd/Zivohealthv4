"""add_visualizations_to_chat_messages

Revision ID: dbfc12478a54
Revises: 021
Create Date: 2025-08-04 14:41:55.052449

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'dbfc12478a54'
down_revision = '021'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('pharmacy_daily_aggregates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('total_spent', sa.Float(), nullable=True),
    sa.Column('total_insurance_coverage', sa.Float(), nullable=True),
    sa.Column('total_copay', sa.Float(), nullable=True),
    sa.Column('total_deductible', sa.Float(), nullable=True),
    sa.Column('total_medications', sa.Integer(), nullable=True),
    sa.Column('prescription_count', sa.Integer(), nullable=True),
    sa.Column('otc_count', sa.Integer(), nullable=True),
    sa.Column('supplement_count', sa.Integer(), nullable=True),
    sa.Column('unique_pharmacies', sa.Integer(), nullable=True),
    sa.Column('total_visits', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_pharmacy_daily_user_date', 'pharmacy_daily_aggregates', ['user_id', 'date'], unique=False)
    op.create_index(op.f('ix_pharmacy_daily_aggregates_id'), 'pharmacy_daily_aggregates', ['id'], unique=False)
    op.create_table('pharmacy_monthly_aggregates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('total_spent', sa.Float(), nullable=True),
    sa.Column('total_insurance_coverage', sa.Float(), nullable=True),
    sa.Column('total_copay', sa.Float(), nullable=True),
    sa.Column('total_deductible', sa.Float(), nullable=True),
    sa.Column('average_daily_spent', sa.Float(), nullable=True),
    sa.Column('total_medications', sa.Integer(), nullable=True),
    sa.Column('prescription_count', sa.Integer(), nullable=True),
    sa.Column('otc_count', sa.Integer(), nullable=True),
    sa.Column('supplement_count', sa.Integer(), nullable=True),
    sa.Column('average_daily_medications', sa.Float(), nullable=True),
    sa.Column('unique_pharmacies', sa.Integer(), nullable=True),
    sa.Column('total_visits', sa.Integer(), nullable=True),
    sa.Column('average_daily_visits', sa.Float(), nullable=True),
    sa.Column('most_visited_pharmacy', sa.String(), nullable=True),
    sa.Column('most_frequent_medication', sa.String(), nullable=True),
    sa.Column('most_expensive_medication', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_pharmacy_monthly_user_date', 'pharmacy_monthly_aggregates', ['user_id', 'year', 'month'], unique=False)
    op.create_index(op.f('ix_pharmacy_monthly_aggregates_id'), 'pharmacy_monthly_aggregates', ['id'], unique=False)
    op.create_table('pharmacy_raw_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('medication_name', sa.String(), nullable=False),
    sa.Column('brand_name', sa.String(), nullable=True),
    sa.Column('generic_name', sa.String(), nullable=True),
    sa.Column('medication_type', sa.String(), nullable=False),
    sa.Column('dosage_form', sa.String(), nullable=True),
    sa.Column('strength', sa.String(), nullable=True),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('quantity_unit', sa.String(), nullable=False),
    sa.Column('days_supply', sa.Integer(), nullable=True),
    sa.Column('refills_remaining', sa.Integer(), nullable=True),
    sa.Column('pharmacy_name', sa.String(), nullable=True),
    sa.Column('pharmacy_type', sa.String(), nullable=True),
    sa.Column('pharmacy_address', sa.String(), nullable=True),
    sa.Column('pharmacy_phone', sa.String(), nullable=True),
    sa.Column('pharmacist_name', sa.String(), nullable=True),
    sa.Column('prescriber_name', sa.String(), nullable=True),
    sa.Column('prescriber_npi', sa.String(), nullable=True),
    sa.Column('prescriber_dea', sa.String(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('insurance_coverage', sa.Float(), nullable=True),
    sa.Column('copay_amount', sa.Float(), nullable=True),
    sa.Column('deductible_amount', sa.Float(), nullable=True),
    sa.Column('purchase_date', sa.Date(), nullable=False),
    sa.Column('purchase_time', sa.DateTime(), nullable=False),
    sa.Column('prescription_date', sa.Date(), nullable=True),
    sa.Column('expiration_date', sa.Date(), nullable=True),
    sa.Column('data_source', sa.String(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('prescription_number', sa.String(), nullable=True),
    sa.Column('ndc_number', sa.String(), nullable=True),
    sa.Column('lot_number', sa.String(), nullable=True),
    sa.Column('manufacturer', sa.String(), nullable=True),
    sa.Column('aggregation_status', sa.String(length=20), nullable=False),
    sa.Column('aggregated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_pharmacy_aggregation_status', 'pharmacy_raw_data', ['aggregation_status', 'user_id', 'purchase_date'], unique=False)
    op.create_index('idx_pharmacy_medication_type_date', 'pharmacy_raw_data', ['medication_type', 'purchase_date'], unique=False)
    op.create_index('idx_pharmacy_ndc_number', 'pharmacy_raw_data', ['ndc_number'], unique=False)
    op.create_index('idx_pharmacy_prescription_number', 'pharmacy_raw_data', ['prescription_number'], unique=False)
    op.create_index('idx_pharmacy_purchase_date_range', 'pharmacy_raw_data', ['purchase_date', 'purchase_time'], unique=False)
    op.create_index('idx_pharmacy_user_purchase_date', 'pharmacy_raw_data', ['user_id', 'purchase_date'], unique=False)
    op.create_index('idx_pharmacy_user_source_date', 'pharmacy_raw_data', ['user_id', 'data_source', 'purchase_date'], unique=False)
    op.create_index(op.f('ix_pharmacy_raw_data_id'), 'pharmacy_raw_data', ['id'], unique=False)
    op.create_table('pharmacy_weekly_aggregates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('week_start_date', sa.Date(), nullable=False),
    sa.Column('week_end_date', sa.Date(), nullable=False),
    sa.Column('total_spent', sa.Float(), nullable=True),
    sa.Column('total_insurance_coverage', sa.Float(), nullable=True),
    sa.Column('total_copay', sa.Float(), nullable=True),
    sa.Column('total_deductible', sa.Float(), nullable=True),
    sa.Column('average_daily_spent', sa.Float(), nullable=True),
    sa.Column('total_medications', sa.Integer(), nullable=True),
    sa.Column('prescription_count', sa.Integer(), nullable=True),
    sa.Column('otc_count', sa.Integer(), nullable=True),
    sa.Column('supplement_count', sa.Integer(), nullable=True),
    sa.Column('average_daily_medications', sa.Float(), nullable=True),
    sa.Column('unique_pharmacies', sa.Integer(), nullable=True),
    sa.Column('total_visits', sa.Integer(), nullable=True),
    sa.Column('average_daily_visits', sa.Float(), nullable=True),
    sa.Column('most_visited_pharmacy', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_pharmacy_weekly_user_date', 'pharmacy_weekly_aggregates', ['user_id', 'week_start_date'], unique=False)
    op.create_index(op.f('ix_pharmacy_weekly_aggregates_id'), 'pharmacy_weekly_aggregates', ['id'], unique=False)
    op.drop_index('idx_rxnorm_pg_embedding_collection', table_name='rxnorm_pg_embedding')
    op.drop_index('idx_rxnorm_pg_embedding_embedding', table_name='rxnorm_pg_embedding')
    op.drop_table('rxnorm_pg_embedding')
    op.drop_table('langchain_pg_embedding')
    op.drop_index('idx_snomed_pg_embedding_collection', table_name='snomed_pg_embedding')
    op.drop_index('idx_snomed_pg_embedding_embedding', table_name='snomed_pg_embedding')
    op.drop_table('snomed_pg_embedding')
    op.drop_table('snomed_pg_collection')
    op.drop_table('rxnorm_pg_collection')
    op.drop_table('langchain_pg_collection')
    op.drop_index('idx_loinc_pg_embedding_collection', table_name='loinc_pg_embedding')
    op.drop_index('idx_loinc_pg_embedding_embedding', table_name='loinc_pg_embedding')
    op.drop_table('loinc_pg_embedding')
    op.drop_table('loinc_pg_collection')
    op.drop_table('vitals_mappings')
    op.add_column('chat_messages', sa.Column('visualizations', sa.JSON(), nullable=True))
    op.alter_column('chat_sessions', 'enhanced_mode_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_index('ix_clinical_reports_chat_session_id', table_name='clinical_reports')
    op.drop_index('ix_clinical_reports_created_at', table_name='clinical_reports')
    op.drop_index('ix_clinical_reports_user_id', table_name='clinical_reports')
    op.drop_index('ix_consultation_requests_clinical_report_id', table_name='consultation_requests')
    op.alter_column('lab_report_categorized', 'loinc_code',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('lab_report_categorized', 'aggregation_status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.drop_index('idx_lab_categorized_inferred_category', table_name='lab_report_categorized')
    op.drop_index('idx_lab_categorized_test_category', table_name='lab_report_categorized')
    op.drop_index('idx_lab_categorized_test_date', table_name='lab_report_categorized')
    op.drop_index('idx_lab_categorized_user_id', table_name='lab_report_categorized')
    op.drop_index('idx_lab_report_categorized_aggregation_status', table_name='lab_report_categorized')
    op.drop_index('idx_lab_report_categorized_loinc_code', table_name='lab_report_categorized')
    op.drop_index('idx_lab_report_categorized_test_code', table_name='lab_report_categorized')
    op.create_index(op.f('ix_lab_report_categorized_aggregation_status'), 'lab_report_categorized', ['aggregation_status'], unique=False)
    op.create_index(op.f('ix_lab_report_categorized_loinc_code'), 'lab_report_categorized', ['loinc_code'], unique=False)
    op.create_index(op.f('ix_lab_report_categorized_test_code'), 'lab_report_categorized', ['test_code'], unique=False)
    op.drop_constraint('lab_report_categorized_extracted_from_document_id_fkey', 'lab_report_categorized', type_='foreignkey')
    op.alter_column('lab_reports', 'categorization_status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.drop_index('idx_lab_reports_categorization_status', table_name='lab_reports')
    op.create_index(op.f('ix_lab_reports_categorization_status'), 'lab_reports', ['categorization_status'], unique=False)
    op.drop_index('idx_lab_reports_daily_loinc_code', table_name='lab_reports_daily')
    op.drop_index('idx_lab_reports_daily_test_code', table_name='lab_reports_daily')
    op.create_index('idx_daily_loinc_code', 'lab_reports_daily', ['loinc_code'], unique=False)
    op.create_index('idx_daily_test_code', 'lab_reports_daily', ['test_code'], unique=False)
    op.create_index('idx_daily_user_loinc_code_date', 'lab_reports_daily', ['user_id', 'loinc_code', 'date'], unique=False)
    op.create_index('idx_daily_user_test_code_date', 'lab_reports_daily', ['user_id', 'test_code', 'date'], unique=False)
    op.create_index(op.f('ix_lab_reports_daily_loinc_code'), 'lab_reports_daily', ['loinc_code'], unique=False)
    op.create_index(op.f('ix_lab_reports_daily_test_code'), 'lab_reports_daily', ['test_code'], unique=False)
    op.drop_index('idx_lab_reports_monthly_loinc_code', table_name='lab_reports_monthly')
    op.drop_index('idx_lab_reports_monthly_test_code', table_name='lab_reports_monthly')
    op.create_index('idx_monthly_loinc_code', 'lab_reports_monthly', ['loinc_code'], unique=False)
    op.create_index('idx_monthly_test_code', 'lab_reports_monthly', ['test_code'], unique=False)
    op.create_index('idx_monthly_user_loinc_code_year_month', 'lab_reports_monthly', ['user_id', 'loinc_code', 'year', 'month'], unique=False)
    op.create_index('idx_monthly_user_test_code_year_month', 'lab_reports_monthly', ['user_id', 'test_code', 'year', 'month'], unique=False)
    op.create_index(op.f('ix_lab_reports_monthly_loinc_code'), 'lab_reports_monthly', ['loinc_code'], unique=False)
    op.create_index(op.f('ix_lab_reports_monthly_test_code'), 'lab_reports_monthly', ['test_code'], unique=False)
    op.drop_index('idx_lab_reports_quarterly_loinc_code', table_name='lab_reports_quarterly')
    op.drop_index('idx_lab_reports_quarterly_test_code', table_name='lab_reports_quarterly')
    op.create_index('idx_quarterly_loinc_code', 'lab_reports_quarterly', ['loinc_code'], unique=False)
    op.create_index('idx_quarterly_test_code', 'lab_reports_quarterly', ['test_code'], unique=False)
    op.create_index('idx_quarterly_user_loinc_code_year_quarter', 'lab_reports_quarterly', ['user_id', 'loinc_code', 'year', 'quarter'], unique=False)
    op.create_index('idx_quarterly_user_test_code_year_quarter', 'lab_reports_quarterly', ['user_id', 'test_code', 'year', 'quarter'], unique=False)
    op.create_index(op.f('ix_lab_reports_quarterly_loinc_code'), 'lab_reports_quarterly', ['loinc_code'], unique=False)
    op.create_index(op.f('ix_lab_reports_quarterly_test_code'), 'lab_reports_quarterly', ['test_code'], unique=False)
    op.drop_index('idx_lab_reports_yearly_loinc_code', table_name='lab_reports_yearly')
    op.drop_index('idx_lab_reports_yearly_test_code', table_name='lab_reports_yearly')
    op.create_index('idx_yearly_loinc_code', 'lab_reports_yearly', ['loinc_code'], unique=False)
    op.create_index('idx_yearly_test_code', 'lab_reports_yearly', ['test_code'], unique=False)
    op.create_index('idx_yearly_user_loinc_code_year', 'lab_reports_yearly', ['user_id', 'loinc_code', 'year'], unique=False)
    op.create_index('idx_yearly_user_test_code_year', 'lab_reports_yearly', ['user_id', 'test_code', 'year'], unique=False)
    op.create_index(op.f('ix_lab_reports_yearly_loinc_code'), 'lab_reports_yearly', ['loinc_code'], unique=False)
    op.create_index(op.f('ix_lab_reports_yearly_test_code'), 'lab_reports_yearly', ['test_code'], unique=False)
    op.alter_column('lab_test_mappings', 'test_name_standardized',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('lab_test_mappings', 'gpt_suggested_category',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Stores GPT suggested category when test is categorized as Others',
               existing_nullable=True)
    op.drop_index('idx_lab_test_mappings_loinc_code', table_name='lab_test_mappings')
    op.drop_index('idx_lab_test_mappings_test_code', table_name='lab_test_mappings')
    op.create_index('idx_test_code', 'lab_test_mappings', ['test_code'], unique=False)
    op.create_index(op.f('ix_lab_test_mappings_loinc_code'), 'lab_test_mappings', ['loinc_code'], unique=False)
    op.create_index(op.f('ix_lab_test_mappings_test_code'), 'lab_test_mappings', ['test_code'], unique=False)
    op.create_index(op.f('ix_lab_test_mappings_test_name_standardized'), 'lab_test_mappings', ['test_name_standardized'], unique=False)
    op.create_index(op.f('ix_medical_images_id'), 'medical_images', ['id'], unique=False)
    op.create_index(op.f('ix_nutrition_daily_aggregates_id'), 'nutrition_daily_aggregates', ['id'], unique=False)
    op.drop_index('idx_nutrition_user_monthly', table_name='nutrition_monthly_aggregates')
    op.create_index('idx_user_nutrition_monthly', 'nutrition_monthly_aggregates', ['user_id', 'year', 'month'], unique=False)
    op.create_index(op.f('ix_nutrition_monthly_aggregates_id'), 'nutrition_monthly_aggregates', ['id'], unique=False)
    op.drop_index('idx_nutrition_dish_type', table_name='nutrition_raw_data')
    op.create_index(op.f('ix_nutrition_raw_data_id'), 'nutrition_raw_data', ['id'], unique=False)
    op.drop_index('idx_nutrition_user_source', table_name='nutrition_sync_status')
    op.create_index('idx_user_source_nutrition', 'nutrition_sync_status', ['user_id', 'data_source'], unique=False)
    op.create_index(op.f('ix_nutrition_sync_status_id'), 'nutrition_sync_status', ['id'], unique=False)
    op.drop_index('idx_nutrition_user_weekly', table_name='nutrition_weekly_aggregates')
    op.create_index('idx_user_nutrition_weekly', 'nutrition_weekly_aggregates', ['user_id', 'week_start_date'], unique=False)
    op.create_index(op.f('ix_nutrition_weekly_aggregates_id'), 'nutrition_weekly_aggregates', ['id'], unique=False)
    op.drop_index('ix_pharmacy_medications_user_id', table_name='pharmacy_medications')
    op.alter_column('prescriptions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('prescriptions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_foreign_key(None, 'prescriptions', 'users', ['user_id'], ['id'])
    op.alter_column('vitals_daily_aggregates', 'count',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('vitals_daily_aggregates', 'primary_source',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.drop_index('idx_loinc_code_daily', table_name='vitals_daily_aggregates')
    op.drop_index('idx_vitals_daily_date', table_name='vitals_daily_aggregates')
    op.drop_index('idx_vitals_daily_unique', table_name='vitals_daily_aggregates')
    op.drop_index('idx_vitals_daily_user_metric', table_name='vitals_daily_aggregates')
    op.create_index(op.f('ix_vitals_daily_aggregates_id'), 'vitals_daily_aggregates', ['id'], unique=False)
    op.create_index(op.f('ix_vitals_daily_aggregates_loinc_code'), 'vitals_daily_aggregates', ['loinc_code'], unique=False)
    op.drop_constraint('vitals_daily_aggregates_user_id_fkey', 'vitals_daily_aggregates', type_='foreignkey')
    op.create_foreign_key(None, 'vitals_daily_aggregates', 'users', ['user_id'], ['id'])
    op.drop_column('vitals_daily_aggregates', 'confidence_score')
    op.alter_column('vitals_hourly_aggregates', 'count',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('vitals_hourly_aggregates', 'primary_source',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.drop_index('idx_loinc_code_hourly', table_name='vitals_hourly_aggregates')
    op.drop_index('idx_vitals_hourly_timestamp', table_name='vitals_hourly_aggregates')
    op.drop_index('idx_vitals_hourly_unique', table_name='vitals_hourly_aggregates')
    op.drop_index('idx_vitals_hourly_user_metric', table_name='vitals_hourly_aggregates')
    op.create_index(op.f('ix_vitals_hourly_aggregates_id'), 'vitals_hourly_aggregates', ['id'], unique=False)
    op.create_index(op.f('ix_vitals_hourly_aggregates_loinc_code'), 'vitals_hourly_aggregates', ['loinc_code'], unique=False)
    op.drop_constraint('vitals_hourly_aggregates_user_id_fkey', 'vitals_hourly_aggregates', type_='foreignkey')
    op.create_foreign_key(None, 'vitals_hourly_aggregates', 'users', ['user_id'], ['id'])
    op.drop_column('vitals_hourly_aggregates', 'confidence_score')
    op.alter_column('vitals_monthly_aggregates', 'primary_source',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.drop_index('idx_loinc_code_monthly', table_name='vitals_monthly_aggregates')
    op.drop_index('idx_vitals_monthly_unique', table_name='vitals_monthly_aggregates')
    op.drop_index('idx_vitals_monthly_user_metric', table_name='vitals_monthly_aggregates')
    op.drop_index('idx_vitals_monthly_year_month', table_name='vitals_monthly_aggregates')
    op.create_index(op.f('ix_vitals_monthly_aggregates_id'), 'vitals_monthly_aggregates', ['id'], unique=False)
    op.create_index(op.f('ix_vitals_monthly_aggregates_loinc_code'), 'vitals_monthly_aggregates', ['loinc_code'], unique=False)
    op.drop_constraint('vitals_monthly_aggregates_user_id_fkey', 'vitals_monthly_aggregates', type_='foreignkey')
    op.create_foreign_key(None, 'vitals_monthly_aggregates', 'users', ['user_id'], ['id'])
    op.drop_column('vitals_monthly_aggregates', 'duration_minutes')
    op.drop_column('vitals_monthly_aggregates', 'confidence_score')
    op.drop_column('vitals_monthly_aggregates', 'count')
    op.create_index(op.f('ix_vitals_raw_categorized_id'), 'vitals_raw_categorized', ['id'], unique=False)
    op.create_index(op.f('ix_vitals_raw_categorized_loinc_code'), 'vitals_raw_categorized', ['loinc_code'], unique=False)
    op.alter_column('vitals_raw_data', 'aggregation_status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('vitals_raw_data', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('vitals_raw_data', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('uq_vitals_raw_data_no_duplicates', 'vitals_raw_data', type_='unique')
    op.create_index('idx_metric_date_range', 'vitals_raw_data', ['metric_type', 'start_date', 'end_date'], unique=False)
    op.create_index('idx_user_metric_date', 'vitals_raw_data', ['user_id', 'metric_type', 'start_date'], unique=False)
    op.create_index('idx_user_source_date', 'vitals_raw_data', ['user_id', 'data_source', 'start_date'], unique=False)
    op.create_index(op.f('ix_vitals_raw_data_id'), 'vitals_raw_data', ['id'], unique=False)
    op.alter_column('vitals_sync_status', 'data_source',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'apple_healthkit'::character varying"))
    op.create_index('idx_user_source_sync', 'vitals_sync_status', ['user_id', 'data_source'], unique=False)
    op.create_index(op.f('ix_vitals_sync_status_id'), 'vitals_sync_status', ['id'], unique=False)
    op.alter_column('vitals_weekly_aggregates', 'week_end_date',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('vitals_weekly_aggregates', 'primary_source',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.drop_index('idx_loinc_code_weekly', table_name='vitals_weekly_aggregates')
    op.drop_index('idx_vitals_weekly_date', table_name='vitals_weekly_aggregates')
    op.drop_index('idx_vitals_weekly_unique', table_name='vitals_weekly_aggregates')
    op.drop_index('idx_vitals_weekly_user_metric', table_name='vitals_weekly_aggregates')
    op.create_index(op.f('ix_vitals_weekly_aggregates_id'), 'vitals_weekly_aggregates', ['id'], unique=False)
    op.create_index(op.f('ix_vitals_weekly_aggregates_loinc_code'), 'vitals_weekly_aggregates', ['loinc_code'], unique=False)
    op.drop_constraint('vitals_weekly_aggregates_user_id_fkey', 'vitals_weekly_aggregates', type_='foreignkey')
    op.create_foreign_key(None, 'vitals_weekly_aggregates', 'users', ['user_id'], ['id'])
    op.drop_column('vitals_weekly_aggregates', 'duration_minutes')
    op.drop_column('vitals_weekly_aggregates', 'confidence_score')
    op.drop_column('vitals_weekly_aggregates', 'count')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vitals_weekly_aggregates', sa.Column('count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('vitals_weekly_aggregates', sa.Column('confidence_score', postgresql.DOUBLE_PRECISION(precision=53), server_default=sa.text('1.0'), autoincrement=False, nullable=True))
    op.add_column('vitals_weekly_aggregates', sa.Column('duration_minutes', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'vitals_weekly_aggregates', type_='foreignkey')
    op.create_foreign_key('vitals_weekly_aggregates_user_id_fkey', 'vitals_weekly_aggregates', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_vitals_weekly_aggregates_loinc_code'), table_name='vitals_weekly_aggregates')
    op.drop_index(op.f('ix_vitals_weekly_aggregates_id'), table_name='vitals_weekly_aggregates')
    op.create_index('idx_vitals_weekly_user_metric', 'vitals_weekly_aggregates', ['user_id', 'metric_type'], unique=False)
    op.create_index('idx_vitals_weekly_unique', 'vitals_weekly_aggregates', ['user_id', 'metric_type', 'week_start_date', 'primary_source'], unique=False)
    op.create_index('idx_vitals_weekly_date', 'vitals_weekly_aggregates', ['week_start_date'], unique=False)
    op.create_index('idx_loinc_code_weekly', 'vitals_weekly_aggregates', ['loinc_code'], unique=False)
    op.alter_column('vitals_weekly_aggregates', 'primary_source',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.alter_column('vitals_weekly_aggregates', 'week_end_date',
               existing_type=sa.DATE(),
               nullable=True)
    op.drop_index(op.f('ix_vitals_sync_status_id'), table_name='vitals_sync_status')
    op.drop_index('idx_user_source_sync', table_name='vitals_sync_status')
    op.alter_column('vitals_sync_status', 'data_source',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'apple_healthkit'::character varying"))
    op.drop_index(op.f('ix_vitals_raw_data_id'), table_name='vitals_raw_data')
    op.drop_index('idx_user_source_date', table_name='vitals_raw_data')
    op.drop_index('idx_user_metric_date', table_name='vitals_raw_data')
    op.drop_index('idx_metric_date_range', table_name='vitals_raw_data')
    op.create_unique_constraint('uq_vitals_raw_data_no_duplicates', 'vitals_raw_data', ['user_id', 'metric_type', 'unit', 'start_date', 'data_source', 'notes'])
    op.alter_column('vitals_raw_data', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('vitals_raw_data', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('vitals_raw_data', 'aggregation_status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.drop_index(op.f('ix_vitals_raw_categorized_loinc_code'), table_name='vitals_raw_categorized')
    op.drop_index(op.f('ix_vitals_raw_categorized_id'), table_name='vitals_raw_categorized')
    op.add_column('vitals_monthly_aggregates', sa.Column('count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('vitals_monthly_aggregates', sa.Column('confidence_score', postgresql.DOUBLE_PRECISION(precision=53), server_default=sa.text('1.0'), autoincrement=False, nullable=True))
    op.add_column('vitals_monthly_aggregates', sa.Column('duration_minutes', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'vitals_monthly_aggregates', type_='foreignkey')
    op.create_foreign_key('vitals_monthly_aggregates_user_id_fkey', 'vitals_monthly_aggregates', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_vitals_monthly_aggregates_loinc_code'), table_name='vitals_monthly_aggregates')
    op.drop_index(op.f('ix_vitals_monthly_aggregates_id'), table_name='vitals_monthly_aggregates')
    op.create_index('idx_vitals_monthly_year_month', 'vitals_monthly_aggregates', ['year', 'month'], unique=False)
    op.create_index('idx_vitals_monthly_user_metric', 'vitals_monthly_aggregates', ['user_id', 'metric_type'], unique=False)
    op.create_index('idx_vitals_monthly_unique', 'vitals_monthly_aggregates', ['user_id', 'metric_type', 'year', 'month', 'primary_source'], unique=False)
    op.create_index('idx_loinc_code_monthly', 'vitals_monthly_aggregates', ['loinc_code'], unique=False)
    op.alter_column('vitals_monthly_aggregates', 'primary_source',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.add_column('vitals_hourly_aggregates', sa.Column('confidence_score', postgresql.DOUBLE_PRECISION(precision=53), server_default=sa.text('1.0'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'vitals_hourly_aggregates', type_='foreignkey')
    op.create_foreign_key('vitals_hourly_aggregates_user_id_fkey', 'vitals_hourly_aggregates', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_vitals_hourly_aggregates_loinc_code'), table_name='vitals_hourly_aggregates')
    op.drop_index(op.f('ix_vitals_hourly_aggregates_id'), table_name='vitals_hourly_aggregates')
    op.create_index('idx_vitals_hourly_user_metric', 'vitals_hourly_aggregates', ['user_id', 'metric_type'], unique=False)
    op.create_index('idx_vitals_hourly_unique', 'vitals_hourly_aggregates', ['user_id', 'metric_type', 'hour_start', 'primary_source'], unique=False)
    op.create_index('idx_vitals_hourly_timestamp', 'vitals_hourly_aggregates', ['hour_start'], unique=False)
    op.create_index('idx_loinc_code_hourly', 'vitals_hourly_aggregates', ['loinc_code'], unique=False)
    op.alter_column('vitals_hourly_aggregates', 'primary_source',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.alter_column('vitals_hourly_aggregates', 'count',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.add_column('vitals_daily_aggregates', sa.Column('confidence_score', postgresql.DOUBLE_PRECISION(precision=53), server_default=sa.text('1.0'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'vitals_daily_aggregates', type_='foreignkey')
    op.create_foreign_key('vitals_daily_aggregates_user_id_fkey', 'vitals_daily_aggregates', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_vitals_daily_aggregates_loinc_code'), table_name='vitals_daily_aggregates')
    op.drop_index(op.f('ix_vitals_daily_aggregates_id'), table_name='vitals_daily_aggregates')
    op.create_index('idx_vitals_daily_user_metric', 'vitals_daily_aggregates', ['user_id', 'metric_type'], unique=False)
    op.create_index('idx_vitals_daily_unique', 'vitals_daily_aggregates', ['user_id', 'metric_type', 'date', 'primary_source'], unique=False)
    op.create_index('idx_vitals_daily_date', 'vitals_daily_aggregates', ['date'], unique=False)
    op.create_index('idx_loinc_code_daily', 'vitals_daily_aggregates', ['loinc_code'], unique=False)
    op.alter_column('vitals_daily_aggregates', 'primary_source',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.alter_column('vitals_daily_aggregates', 'count',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.drop_constraint(None, 'prescriptions', type_='foreignkey')
    op.alter_column('prescriptions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('prescriptions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index('ix_pharmacy_medications_user_id', 'pharmacy_medications', ['user_id'], unique=False)
    op.drop_index(op.f('ix_nutrition_weekly_aggregates_id'), table_name='nutrition_weekly_aggregates')
    op.drop_index('idx_user_nutrition_weekly', table_name='nutrition_weekly_aggregates')
    op.create_index('idx_nutrition_user_weekly', 'nutrition_weekly_aggregates', ['user_id', 'week_start_date'], unique=False)
    op.drop_index(op.f('ix_nutrition_sync_status_id'), table_name='nutrition_sync_status')
    op.drop_index('idx_user_source_nutrition', table_name='nutrition_sync_status')
    op.create_index('idx_nutrition_user_source', 'nutrition_sync_status', ['user_id', 'data_source'], unique=False)
    op.drop_index(op.f('ix_nutrition_raw_data_id'), table_name='nutrition_raw_data')
    op.create_index('idx_nutrition_dish_type', 'nutrition_raw_data', ['dish_type', 'meal_date'], unique=False)
    op.drop_index(op.f('ix_nutrition_monthly_aggregates_id'), table_name='nutrition_monthly_aggregates')
    op.drop_index('idx_user_nutrition_monthly', table_name='nutrition_monthly_aggregates')
    op.create_index('idx_nutrition_user_monthly', 'nutrition_monthly_aggregates', ['user_id', 'year', 'month'], unique=False)
    op.drop_index(op.f('ix_nutrition_daily_aggregates_id'), table_name='nutrition_daily_aggregates')
    op.drop_index(op.f('ix_medical_images_id'), table_name='medical_images')
    op.drop_index(op.f('ix_lab_test_mappings_test_name_standardized'), table_name='lab_test_mappings')
    op.drop_index(op.f('ix_lab_test_mappings_test_code'), table_name='lab_test_mappings')
    op.drop_index(op.f('ix_lab_test_mappings_loinc_code'), table_name='lab_test_mappings')
    op.drop_index('idx_test_code', table_name='lab_test_mappings')
    op.create_index('idx_lab_test_mappings_test_code', 'lab_test_mappings', ['test_code'], unique=False)
    op.create_index('idx_lab_test_mappings_loinc_code', 'lab_test_mappings', ['loinc_code'], unique=False)
    op.alter_column('lab_test_mappings', 'gpt_suggested_category',
               existing_type=sa.VARCHAR(length=100),
               comment='Stores GPT suggested category when test is categorized as Others',
               existing_nullable=True)
    op.alter_column('lab_test_mappings', 'test_name_standardized',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.drop_index(op.f('ix_lab_reports_yearly_test_code'), table_name='lab_reports_yearly')
    op.drop_index(op.f('ix_lab_reports_yearly_loinc_code'), table_name='lab_reports_yearly')
    op.drop_index('idx_yearly_user_test_code_year', table_name='lab_reports_yearly')
    op.drop_index('idx_yearly_user_loinc_code_year', table_name='lab_reports_yearly')
    op.drop_index('idx_yearly_test_code', table_name='lab_reports_yearly')
    op.drop_index('idx_yearly_loinc_code', table_name='lab_reports_yearly')
    op.create_index('idx_lab_reports_yearly_test_code', 'lab_reports_yearly', ['test_code'], unique=False)
    op.create_index('idx_lab_reports_yearly_loinc_code', 'lab_reports_yearly', ['loinc_code'], unique=False)
    op.drop_index(op.f('ix_lab_reports_quarterly_test_code'), table_name='lab_reports_quarterly')
    op.drop_index(op.f('ix_lab_reports_quarterly_loinc_code'), table_name='lab_reports_quarterly')
    op.drop_index('idx_quarterly_user_test_code_year_quarter', table_name='lab_reports_quarterly')
    op.drop_index('idx_quarterly_user_loinc_code_year_quarter', table_name='lab_reports_quarterly')
    op.drop_index('idx_quarterly_test_code', table_name='lab_reports_quarterly')
    op.drop_index('idx_quarterly_loinc_code', table_name='lab_reports_quarterly')
    op.create_index('idx_lab_reports_quarterly_test_code', 'lab_reports_quarterly', ['test_code'], unique=False)
    op.create_index('idx_lab_reports_quarterly_loinc_code', 'lab_reports_quarterly', ['loinc_code'], unique=False)
    op.drop_index(op.f('ix_lab_reports_monthly_test_code'), table_name='lab_reports_monthly')
    op.drop_index(op.f('ix_lab_reports_monthly_loinc_code'), table_name='lab_reports_monthly')
    op.drop_index('idx_monthly_user_test_code_year_month', table_name='lab_reports_monthly')
    op.drop_index('idx_monthly_user_loinc_code_year_month', table_name='lab_reports_monthly')
    op.drop_index('idx_monthly_test_code', table_name='lab_reports_monthly')
    op.drop_index('idx_monthly_loinc_code', table_name='lab_reports_monthly')
    op.create_index('idx_lab_reports_monthly_test_code', 'lab_reports_monthly', ['test_code'], unique=False)
    op.create_index('idx_lab_reports_monthly_loinc_code', 'lab_reports_monthly', ['loinc_code'], unique=False)
    op.drop_index(op.f('ix_lab_reports_daily_test_code'), table_name='lab_reports_daily')
    op.drop_index(op.f('ix_lab_reports_daily_loinc_code'), table_name='lab_reports_daily')
    op.drop_index('idx_daily_user_test_code_date', table_name='lab_reports_daily')
    op.drop_index('idx_daily_user_loinc_code_date', table_name='lab_reports_daily')
    op.drop_index('idx_daily_test_code', table_name='lab_reports_daily')
    op.drop_index('idx_daily_loinc_code', table_name='lab_reports_daily')
    op.create_index('idx_lab_reports_daily_test_code', 'lab_reports_daily', ['test_code'], unique=False)
    op.create_index('idx_lab_reports_daily_loinc_code', 'lab_reports_daily', ['loinc_code'], unique=False)
    op.drop_index(op.f('ix_lab_reports_categorization_status'), table_name='lab_reports')
    op.create_index('idx_lab_reports_categorization_status', 'lab_reports', ['categorization_status'], unique=False)
    op.alter_column('lab_reports', 'categorization_status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.create_foreign_key('lab_report_categorized_extracted_from_document_id_fkey', 'lab_report_categorized', 'document_processing_logs', ['extracted_from_document_id'], ['id'])
    op.drop_index(op.f('ix_lab_report_categorized_test_code'), table_name='lab_report_categorized')
    op.drop_index(op.f('ix_lab_report_categorized_loinc_code'), table_name='lab_report_categorized')
    op.drop_index(op.f('ix_lab_report_categorized_aggregation_status'), table_name='lab_report_categorized')
    op.create_index('idx_lab_report_categorized_test_code', 'lab_report_categorized', ['test_code'], unique=False)
    op.create_index('idx_lab_report_categorized_loinc_code', 'lab_report_categorized', ['loinc_code'], unique=False)
    op.create_index('idx_lab_report_categorized_aggregation_status', 'lab_report_categorized', ['aggregation_status'], unique=False)
    op.create_index('idx_lab_categorized_user_id', 'lab_report_categorized', ['user_id'], unique=False)
    op.create_index('idx_lab_categorized_test_date', 'lab_report_categorized', ['test_date'], unique=False)
    op.create_index('idx_lab_categorized_test_category', 'lab_report_categorized', ['test_category'], unique=False)
    op.create_index('idx_lab_categorized_inferred_category', 'lab_report_categorized', ['inferred_test_category'], unique=False)
    op.alter_column('lab_report_categorized', 'aggregation_status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('lab_report_categorized', 'loinc_code',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.create_index('ix_consultation_requests_clinical_report_id', 'consultation_requests', ['clinical_report_id'], unique=False)
    op.create_index('ix_clinical_reports_user_id', 'clinical_reports', ['user_id'], unique=False)
    op.create_index('ix_clinical_reports_created_at', 'clinical_reports', ['created_at'], unique=False)
    op.create_index('ix_clinical_reports_chat_session_id', 'clinical_reports', ['chat_session_id'], unique=False)
    op.alter_column('chat_sessions', 'enhanced_mode_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.drop_column('chat_messages', 'visualizations')
    op.create_table('vitals_mappings',
    sa.Column('vital_sign', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('loinc_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('property', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('units', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('system', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('loinc_source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('vital_sign', name='vitals_mappings_pkey')
    )
    op.create_table('loinc_pg_collection',
    sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name='loinc_pg_collection_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('loinc_pg_embedding',
    sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('collection_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('document', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['loinc_pg_collection.uuid'], name='loinc_pg_embedding_collection_id_fkey'),
    sa.PrimaryKeyConstraint('uuid', name='loinc_pg_embedding_pkey')
    )
    op.create_index('idx_loinc_pg_embedding_embedding', 'loinc_pg_embedding', ['embedding'], unique=False)
    op.create_index('idx_loinc_pg_embedding_collection', 'loinc_pg_embedding', ['collection_id'], unique=False)
    op.create_table('langchain_pg_collection',
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name='langchain_pg_collection_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('snomed_pg_embedding',
    sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('collection_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('document', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['snomed_pg_collection.uuid'], name='snomed_pg_embedding_collection_id_fkey'),
    sa.PrimaryKeyConstraint('uuid', name='snomed_pg_embedding_pkey')
    )
    op.create_index('idx_snomed_pg_embedding_embedding', 'snomed_pg_embedding', ['embedding'], unique=False)
    op.create_index('idx_snomed_pg_embedding_collection', 'snomed_pg_embedding', ['collection_id'], unique=False)
    op.create_table('rxnorm_pg_collection',
    sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name='rxnorm_pg_collection_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('snomed_pg_collection',
    sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name='snomed_pg_collection_pkey')
    )
    op.create_table('langchain_pg_embedding',
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('collection_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], name='langchain_pg_embedding_collection_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid', name='langchain_pg_embedding_pkey')
    )
    op.create_table('rxnorm_pg_embedding',
    sa.Column('uuid', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('collection_id', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('document', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['rxnorm_pg_collection.uuid'], name='rxnorm_pg_embedding_collection_id_fkey'),
    sa.PrimaryKeyConstraint('uuid', name='rxnorm_pg_embedding_pkey')
    )
    op.create_index('idx_rxnorm_pg_embedding_embedding', 'rxnorm_pg_embedding', ['embedding'], unique=False)
    op.create_index('idx_rxnorm_pg_embedding_collection', 'rxnorm_pg_embedding', ['collection_id'], unique=False)
    op.drop_index(op.f('ix_pharmacy_weekly_aggregates_id'), table_name='pharmacy_weekly_aggregates')
    op.drop_index('idx_pharmacy_weekly_user_date', table_name='pharmacy_weekly_aggregates')
    op.drop_table('pharmacy_weekly_aggregates')
    op.drop_index(op.f('ix_pharmacy_raw_data_id'), table_name='pharmacy_raw_data')
    op.drop_index('idx_pharmacy_user_source_date', table_name='pharmacy_raw_data')
    op.drop_index('idx_pharmacy_user_purchase_date', table_name='pharmacy_raw_data')
    op.drop_index('idx_pharmacy_purchase_date_range', table_name='pharmacy_raw_data')
    op.drop_index('idx_pharmacy_prescription_number', table_name='pharmacy_raw_data')
    op.drop_index('idx_pharmacy_ndc_number', table_name='pharmacy_raw_data')
    op.drop_index('idx_pharmacy_medication_type_date', table_name='pharmacy_raw_data')
    op.drop_index('idx_pharmacy_aggregation_status', table_name='pharmacy_raw_data')
    op.drop_table('pharmacy_raw_data')
    op.drop_index(op.f('ix_pharmacy_monthly_aggregates_id'), table_name='pharmacy_monthly_aggregates')
    op.drop_index('idx_pharmacy_monthly_user_date', table_name='pharmacy_monthly_aggregates')
    op.drop_table('pharmacy_monthly_aggregates')
    op.drop_index(op.f('ix_pharmacy_daily_aggregates_id'), table_name='pharmacy_daily_aggregates')
    op.drop_index('idx_pharmacy_daily_user_date', table_name='pharmacy_daily_aggregates')
    op.drop_table('pharmacy_daily_aggregates')
    # ### end Alembic commands ### 